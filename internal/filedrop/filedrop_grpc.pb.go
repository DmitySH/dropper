// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: api/dropper/filedrop.proto

package filedrop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileDropClient is the client API for FileDrop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileDropClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FileDrop_GetFileClient, error)
}

type fileDropClient struct {
	cc grpc.ClientConnInterface
}

func NewFileDropClient(cc grpc.ClientConnInterface) FileDropClient {
	return &fileDropClient{cc}
}

func (c *fileDropClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/filedrop.FileDrop/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileDropClient) GetFile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FileDrop_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileDrop_ServiceDesc.Streams[0], "/filedrop.FileDrop/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDropGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileDrop_GetFileClient interface {
	Recv() (*FileRequest, error)
	grpc.ClientStream
}

type fileDropGetFileClient struct {
	grpc.ClientStream
}

func (x *fileDropGetFileClient) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileDropServer is the server API for FileDrop service.
// All implementations must embed UnimplementedFileDropServer
// for forward compatibility
type FileDropServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetFile(*emptypb.Empty, FileDrop_GetFileServer) error
	mustEmbedUnimplementedFileDropServer()
}

// UnimplementedFileDropServer must be embedded to have forward compatible implementations.
type UnimplementedFileDropServer struct {
}

func (UnimplementedFileDropServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileDropServer) GetFile(*emptypb.Empty, FileDrop_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileDropServer) mustEmbedUnimplementedFileDropServer() {}

// UnsafeFileDropServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileDropServer will
// result in compilation errors.
type UnsafeFileDropServer interface {
	mustEmbedUnimplementedFileDropServer()
}

func RegisterFileDropServer(s grpc.ServiceRegistrar, srv FileDropServer) {
	s.RegisterService(&FileDrop_ServiceDesc, srv)
}

func _FileDrop_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileDropServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filedrop.FileDrop/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileDropServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileDrop_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileDropServer).GetFile(m, &fileDropGetFileServer{stream})
}

type FileDrop_GetFileServer interface {
	Send(*FileRequest) error
	grpc.ServerStream
}

type fileDropGetFileServer struct {
	grpc.ServerStream
}

func (x *fileDropGetFileServer) Send(m *FileRequest) error {
	return x.ServerStream.SendMsg(m)
}

// FileDrop_ServiceDesc is the grpc.ServiceDesc for FileDrop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileDrop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filedrop.FileDrop",
	HandlerType: (*FileDropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FileDrop_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _FileDrop_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/dropper/filedrop.proto",
}
